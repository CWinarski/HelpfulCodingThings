API: Application Programming Interface
-

* REST means REpresentational State Transfer:
REST is a guildine for making applications that are scalable, vidible, protable, reliable, and able to perform better.

REST has 6 constraints:
- Concerns should be separated between clients and servers as in the client's problems are the clients and the sever's problems are the servers
- It should be stateless; the communication between client and server should not be dependent on the client state. The  Client must include all info for the server
- There should be layers in the system. Things such as gateways, firewalls, and proxies can exist between client and server
- Responses from the server should be declared as cacheable or noncacheable
- All interactions between client, sever, and intermediary components are based on the uniformity of their interfaces
- CLients can execute code on demand inlucding javascript scripts, java applets, silverlight, etc.

URI: Uniform Resource Identifier www.zipcoder.io

GET:
* Retrieves information from the given server using the given URI
* HTTP is a form of GET

Idempotency: GET HEAD PUT DELETE are requests that produce the same result no matter how many requests are made

POST:
* a request used to send data to the server using HTML forms. Doesn't need to know the URI of the resource9

HEAD:
* same as GET but transfers the status line and header section only. It is like a peak at the data without grabbing an actual representation of it

PUT:
*replaces all current representations of the target resource with the uploaded content

DELETE:
* removes all current representations of the target resource given by a URI. Requests for it to be done. It doesn't actually delete until the request is approved

CONNECT:
* Established a tunnel to the server identified by a given URI

OPTIONS:
Describes the communication options for the target resource

TRACE:
* performs a message loop-back test along the path to the target resource

CRUD
* create
* read
* update
* delete

HTTP Status Codes
* 1xx Continue (100)
* 2xx Success (200)
* 3xx Redirection (300 Multiple Choices)
* 4xx Client Error (400 Bad Request)
* 5xx Server Error (500 Internal Server Error)


Resources
- a resource is anything that can be accessed or manipulated. The web provieds a URI for resources.
- URIs are broken down into scheme:scheme-specific-part

ex:
scheme: scheme specific part
http://www.apress.com/9781484208427

URI Templates
* http://blog.example.com/{year}/posts
the brackets indicate that the year portion of the template is a variable

Representation
*RESTful resources are abstract entities.
The data and metadata that make a RESTful resource needs to be serialized into a representation before it gets sent to a client.
This representation can be viewed as a snapshot of a resource’s state at a given point in time.
As in someone buying goods gets the product details as an HTML Webpage while a developer gets those same details in a XML or JSON
so the actual datat isn't touched it is a representation of the data


Content Negotiation is when a clent requests a particular representaton of the data. it can be done in two ways
- Postfixing the URI with the desired representation
    http://www.example. com/products/143.json
    http://www.example. com/products/143.xml
- Using the Accept header
        ex:
        Accept: <MIME_type>/<MIME_subtype>
        Accept: <MIME_type>/*
        Accept: */*

========================================================================================================================
Spring Web MVC Primer

Spring web MVC is a web framework that simplifies Web and REST application development

ORM maps two concepts: object oriented and relational. It allows the use of java objects as
representation of a relational database
JDBC - java database connectivity, connects java written programs to databases
JMS - Java Message Service allows applications to create send and receive and read messages using loosely coupled communication


Dependency injection:
- This allows dependencies to be injected into components that need them
- this allows those components to be loosely coupled by not needing to create their own dependencies

Aspect Oriented Programming
- it is a programming model that implements crosscutting concerns.
- Logging, transactions metrics and security are some examples if concerns that span (crosscut)
different parts of an application.
- they don't deal with business logic and are often duplicated across the application
- A Concern is a term that refers to a part of the system divided on the basis of the functionality
- AOP provides a standardized mechanism called an aspect for encapsulating such concerns in a single location
- These aspects are then weaved into other objects so that the crosscutting logic is automaticallu applied
across the application.
- Spring provides two-proxy implementations—JDK dynamic proxy and CGLIB proxy. If the target bean implements an interface,
    Spring will use JDK dynamic proxy to create the AOP proxy.
    If the class doesn't implement an interface, Spring uses CGLIB to create a proxy.
- proxies are like debit cards for our banks. We use the card in place of money and provides a way
to get cash if we need it, Java proxies do the same, They control and manage access to the object
they are "protecting"

==========================================================================================================
Modern View Controller Pattern: MVC
- it is a pattern for building decoupled web applications
- decomposed the ui layer into 3 components
  Model, View, Controller

----------------------------------------------------------------------------------------------------------
 Model:
 - Represents the data or state
   ex: info representing accounts transactions, and statements
-Spring provides the org.springframework.ui.Model interface that serves as holder for model attributes

ex:public interface Model {
           Model addAttribute(String attributeName, Object attributeValue);
           Model addAttribute(Object attributeValue);
           Model addAllAttributes(Collection<?> attributeValues);
           Model addAllAttributes(Map<String, ?> attributes);
          }
   Model mergeAttributes(Map<String, ?> attributes);
   boolean containsAttribute(String attributeName);
   Map<String, Object> asMap();


----------------------------------------------------------------------------------------------------------
View:
- Provides visual representation of the model
  ex: this is what the user interacts with by providing inputs and viewing the output
  webpages displaying the accounts
-Spring Web MVC supports a variety of view technologies such as JSP, Velocity, Freemarker, and XSLT.
Spring Web MVC uses the org.springframework.web.servlet.View interface to accomplish this
- The view interface has two methods
- concrete implementations of the view interface are responsible fo the rendering of the response
- this is accomplished by overriding the render method
- the getContentType method returns the generated view content type
ex:
public interface View
{
        String getContentType();

        void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse
response) throws Exception;
}

----------------------------------------------------------------------------------------------------------
Controller:

- responsible for handling user actions such as button clicks. It then interacts with services or
repositories to prepare the model and hands the prepared model over to an appropriate view
- Controllers in Spring Web MVC are declared using the stereotype org.springframework.stereotype.
Controller. A stereotype in Spring designates roles or responsibilities of a class or an interface.
- The @Controller annotation designates the HomeController as a MVC Controller
- The @RequestMapping annotation maps Web requests to handler classes and handler methods
ex: Basic Controller
@Controller
public class HomeController {
        @RequestMapping("/home.html")
        public String showHomePage() {
                return "home";
} }

-----------------------------------------------------------------------------------------------------------
- The easiest way for a controller to work with a model object is by declaring it as a method parameter

ex:
@RequestMapping("/home.html")
public String showHomePage(Model model) {
        model.addAttribute("currentDate", new Date());
        return "home";
}

----------------------------------------------------------------------------------------------------------
@RequestParam
- this annotation is uesed to bind servlet request parameters to handler/controller method paramters
- the request parameter values are automatically converted to the specified method parameter type using type conversion
- two examples

@RequestMapping("/search.html")
public String search(@RequestParam String query, @RequestParam("page") int pageNumber) {
        model.put("currentDate", new Date());
        return "home";
}

- When a method parameter is annotated using @RequestParam, the specified request
parameter must be available in the client request. If the parameter is missing, Spring will throw a MissingServletRequestParameterException exception.

@RequestMapping("/search.html")
public String search(@RequestParam String query, @RequestParam(value="page", required=false)
int pageNumber) {
        model.put("currentDate", new Date());
        return "home";
}

-----------------------------------------------------------------------------------------------------------
@RequestMapping
- an annotation used to map a web request to a handler class or handler method
- it also provides several attributes that can be used to narrow down these mappings

 POST method example
@RequestMapping(value="/saveuser.html", method=RequestMethod.POST)
public String saveUser(@RequestParam String username, @RequestParam String password) {
        // Save User logic
        return "success";
}

Accept and Content Type Header
- REST clients typically use the Accept and content type headers to work with different
representations
- The accept header is used to indicate the representations that they accept
- the content type header is used to indicate the media type of the request being sent to the server

-----------------------------------------------------------------------------------------------------------
Path Variables
- The @RequestMapping annotation supports dynamic URIs via URI templates
- URI templates are URIs with placeholders or variables. The @PathVariable
annotation allows you to access and use these placeholders via method parameters

PathVariable example:
@RequestMapping("/users/{username}")
public User getUser(@PathVariable("username") String username) {
        User user = null;
        // Code to construct user object using username
        return user;
}

View Resolver
- When a logical view
  name is returned, a ViewResolver is employed to resolve the view to a View implementation.
   If this process fails for some reason, a javax.servlet.ServletException is thrown. The ViewResolver interface has a single method

   ViewResolver Interface example
   public interface ViewResolver
   {
   View resolveViewName(String viewName, Locale locale) throws Exception;

   }

    InternalViewResolver example
   @Bean
   public ViewResolver viewResolver() {
        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
        viewResolver.setPrefix("/WEB-INF/jsp/");
        viewResolver.setSuffix(".jsp");
        return viewResolver;
   }

Exception Handler:
- Exceptions are part of any application and Spring provides the HandlerExceptionResolver mechanism for handling those unexpected exceptions.
- The HandlerExceptionResolver abstraction is similar to the ViewResolver and is used to resolve exceptions to error views.

HandlerExceptionResolver API
public interface HandlerExceptionResolver {
ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,
Object handler, Exception ex);
}


ExceptionHandler example
@Controller
public class HomeController {
        @ExceptionHandler(SQLException.class)
        public ResponseEntity handleSQLException() {
ResponseEntity responseEntity = new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
                return responseEntity;
}
@RequestMapping("/stream")
        public void streamMovie(HttpServletResponse response) throws SQLException {
} }

-The @ExceptionHandler annotated methods can only handle exceptions that occur in the controller or its subclasses.
If we need to handle SQL exceptions in other controllers, then we need to copy and paste the handleSQLException method in all of those controllers.
- So Spring provides the @ControllerAdvice annotation. Methods in classes annotated with
@ControllerAdvice get applied to all the @RequestMapping methods.

GlobalExceptionHandler example @ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
        @ExceptionHandler(SQLException.class)
        public ResponseEntity handleSQLException() {
ResponseEntity responseEntity = new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
                return responseEntity;
} }


Interceptors
- Spring Web MVC provides the notion of interceptors to implement concerns that crosscut across different handlers
- Consider the scenario in which you want to prevent unauthenticated access to a set of controllers.
An interceptor allows you to centralize this access logic without you having to copy and paste the code in every controller.

Interceptors intercept requests:
- Before the controller gets executed. This allows the interceptor to decide if it needs to continue the execution chain or return with an exception or custom response
- After the controller gets executed but before the response is sent out. This allows the interceptor to provide any additional model objects to the view.
- After the response is sent out allowing any resource cleanup.

HandlerInterceptor API
public interface HandlerInterceptor{
    void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object
handler, Exception ex);
    void postHandle(HttpServletRequest request, HttpServletResponse response, Object
handler, ModelAndView modelAndView);
    boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object
handler); }

Spring Web MVC Interceptor example
public class SimpleInterceptor extends HandlerInterceptorAdapter {
        private static final Logger logger = Logger.getLogger(SimpleInterceptor.class);
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response,
        Object handler) throws Exception {
        logger.info("Inside the prehandle");
        return false;
    }
}

- Interceptors can be registered in a Spring Web application using the InterceptorRegistry strategy
- When an interceptor is added to the interceptor registry, the interceptor gets applied to all of the handler mappings

Example registering interceptors
@Configuration
@EnableWebMvc
@ComponentScan(basePackages = { "com.apress.springrest.web" })
public class WebConfig extends WebMvcConfigurerAdapter {
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
registry.addInterceptor(new LocaleChangeInterceptor());
registry.addInterceptor(new SimpleInterceptor()).addPathPatterns("/auth/**"); }
}


